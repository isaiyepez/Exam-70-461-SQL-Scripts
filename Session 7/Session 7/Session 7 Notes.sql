-- TRANSACTION

-- Series of statements, treated as group, with the posibility of being commited
-- or undone (rolled back), in case of failure or for specific purposes.

-- Properties of a transaction: ACID
-- Atomic, atomicity means that it is a single unit of work.
-- Consistent, takes care of data integrity, every rule or contraint must be completed.
-- Isolated, each transaction uses only the specific part of the data that will need.
-- Durable, after it is completed, its effects are permanent.


-- RESULTS OF NO CONCURRENCY CONTROL

-- 1. Lost updates: if a transaction and "B" transaction have concurrency, 
--    and "B" saves later than "A" saves, the changes generated by "A" will be rewritten by "B"

-- 2. Dirty read: uncommited dependency, you are reading data that is not commited, and may
--    be rolled back.

-- 3. Inconsistent analysis: nonrepeatable read, it may sound confusing but means that 
--    if you create a transaction that has two readings in a table -adding a delay in the middle, 
--    and while this delay happens, the table is updated, you have two different results: one with
--    the values before the update and the second with the values updated. The expected behavior is
--    that the FIRST TRANSACTION BLOCKS ANY OTHER, so that we can have a repeatable reading.

-- 4. Phantom read: number of row changes, not only updated. You read rows that does not exist
--    any more.

-- 5. Missing and double reads caused by row updates: a row could has been moved to a different
--    position in the table. That could cause in a paged select, that we double read or miss a row.

-- 6. Missing one or more rows that were not the target of update.

-- ISOLATION LEVEL      DIRTY READ      NONREPEATABLE READ      PHANTOM
-- Read uncommited			Yes					Yes				  Yes
-- Read commited			No					Yes				  Yes -- DEFAULT OPTION
-- Repeatable read			No					No				  Yes
-- Snapshot					No					No				  No
-- Serializable				No					No				  No


